# 스프링 환경하에 채팅 처리
1. websocket 통신에 대한 이해
	1) 특징
		web 환경에서 서버와 클라이언트 간에 메시지를 push방식으로 처리하는 것을 말한다.
		일반적으로 웹 프로그래밍에서는 특정한 이벤트(submit)등에 의해 데이터를 서버에 전달했지만, 
		push방식으로 client가 요청하는 것이 아니라 서버에 의해서 적극적으로 client에 데이터를 전달하는 소켓통신을 이용한다.
		ps)
		# 웹 프로그래밍 서버 클라이언트 데이터 처리 방식
		1. 페이지 호출과 요청값 전송
			client === 페이지(컨트롤러) ==> server
				<=== 해당 페이지 /view ==
			client === 요청값(query string) ==> server
		2. ajax 처리
			client === 요청값(query string) ==> server
			client === 페이지(컨트롤러) ==> server
				<=== 해당 json 데이터 전달 ===
		3. push방식
			client == 소켓통신(msg 전달) ==> server
			server ==> 소켓서버에 접속한 모든 클라이언트에게
				메시지(push) ==> client				
	2) 주요방식
		client vs server
		client는 웹 소켓 서버에 데이터를 능동적으로 전달할 뿐아니라, 수동적으로 서버에서 오는 데이터를 받을 수 있다.
			주로 js에 의해 처리된다.
		server는 client에 오는 데이터를 받아서, 이 서버와 소켓통신으로 연결된 client들에게 
			로직이나 조건에 의해 전부 또는일부로 선택하여 데이터를 push 방식으로 전송할 수 있다.	
2. 기본 개발 환경 구성
	1) lib 확인 : 필요로 하는 웹 소켓 통신 jar를 확인
	2) 컨테이너에서 websocket 통신 서버를 설정하는 객체를 선언하여 등록한다.
		핸들러명과 client에서 핸들러를 호출하는 url패턴도 함꼐 선언하여야 한다.
		
3. 채팅 처리 프로세스
	1) [front단] 채팅을 처리하는 초기 화면을 로딩하고
	2) [front단] 채팅을 하는 id를 입력하여, 접속버튼을 클릭하여 채팅 서버에 접속한다.
	3) [back 단] 채팅에서 handler 서버는 자체내에 id 생성 프로세스에 의해 클라이언트 하나를 등록한다.
	4) [front단] 한명의 클라이언트가 메시지를 입력하고 서버에 전달한다.
	5) [back 단] 클라이언트단에서 넘겨온 메시지를 handler는 지금 접속되어 있는 클라이언트 전부 또는 일부에게 메시지를 전송한다.
	6) [front단] 서버로부터 전달 받은 메시지는 화면의 메시지 창에 메시지 내용으로 전달 받아 출력 된다.
	7) [front단] 클라이언트가 접속 종료를 누르면 다시 종료 내용을 서버에 전달한다.
	8) [back 단] 접속종료가 오면 해당 client는 현재 서버에서 등록된 목록중에 삭제를 처리한다.
	 
	
4. 개발 순서
	1) 소켓 통신을 서버단에서 처리해주는 java로 된 handler 클래스 선언과 등록
	2) 컨테이너에 소켓통신을 위한 선언된 핸들러 클래스를 client에서 호출하는 url설정과 기본 소켓 api객체 선언
		- 접속시 처리할 메서드
		- 메시지전송시 처리할 메서드
		- 접속종료시 처리할 메서드
		- 예외 처리할 처리할 메서드
	3) 서버 접속과 핸들러 클래스로 부터 받아온 메시지를 처리할 client js 처리
		- 아이디 입력 후, 접속 버튼 클릭시, socket 클라이언트 객체를 통해 서버에 접속하게 처리
		- 각 기능적 단계별로 처리한 내용을 행들러 메서드를 통해서 처리
			접속
			메시지전송
			접속종료
		- 입력창의 적절한 이벤트 처리와 메시지 출력에 대한 autoscrolling 처리
			
