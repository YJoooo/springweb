2022-07-04
[1단계:확인] 1. 컨테이너에 1:1관계에 있는 펜과 노트를 객체를 선언하여 처리하고, 내용을 출력하세요
// DIXExp20.java
		Note note=ctx.getBean("note",Note.class);
		System.out.println(note);
		note.wirte();
// di20.xml
  	<bean id="pen" class="a01_diexp.z01_vo.Pen">
       	<constructor-arg value="color pencil"/>
       	<constructor-arg value="6000"/>
       </bean>
       <bean id="note" class="a01_diexp.z01_vo.Note">
       <constructor-arg value="spring note"/>
       <property name="pen" ref="pen"/>
       </bean>		
// consol 결과
	spring note에 
	6000짜리color pencil으로 글을 썼다.
	
[1단계:개념] 2. autowire 무엇인지 기술하고, 종류를 기술하세요
autowire 란? 스프링에서 빈 인스턴스가 생성된 이후 @Autowired를 설정한 메서드가 자동으로 호출되고, 인스턴스가 자동으로 주입됩니다.
 - 생성자 주입 : 생성자를 통해서 의존관계를 주입하는 것입니다. 생성자 호출시점에 주입되기 때문에 한번만 주입되는 것을 보장하고 불변, 필수 의존관계에 사용
 - 수정자 주입 : 수정자 주입은 setter를 통해서 의존관계를 주입하는 방법입니다. 선택과 변경의 가능성이 있는 의존관계에 사용하면 좋습니다. 
 			이는 직접 필드의 값을 변경하지않고 get~, set~의 메서드를 이용하는 자바빈 프로퍼티의 규약을 따르는 방식입니다.
 - 필드 주입 : 필드주입은 필드(멤버변수)에 바로 의존성을 주입해주는 것입니다. 단점으로는 외부에서 변경이 불가능합니다.
 - 일반 메서드 주입 : 수정자 주입의 일반적인 케이스라고 생각하면 되는 방법입니다. 장점으로는 한번에 여러 필드에 의존성을 주입할 수 있다는 것이있습니다.
 
[1단계:확인] 3. 놀이공원에 간 사람으로 1:1관계로 class를 설정하고 autowiring 옵션을 설정하여 처리하세요.
// AmusementPark
	package a01_diexp.z01_vo;
	// a01_diexp.z01_vo.AmusementPark
	public class AmusementPark {
		private String name;
		private String loc;
		public AmusementPark() {
			// TODO Auto-generated constructor stub
		}
		public AmusementPark(String name, String loc) {
			super();
			this.name = name;
			this.loc = loc;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getLoc() {
			return loc;
		}
		public void setLoc(String loc) {
			this.loc = loc;
		}
		
	}

// ParkPerson
	package a01_diexp.z01_vo;
	
	public class ParkPerson {
		private String name;
		private AmusementPark amusementpark;
		public ParkPerson() {
			// TODO Auto-generated constructor stub
		}
		public ParkPerson(String name) {
			super();
			this.name = name;
		}
		public void going() {
			System.out.print(name+"은");
			if(name!=null) {
				System.out.println(amusementpark.getLoc()+"에 위치한 "+amusementpark.getName()+"에 다녀왔다");
			}else {
				System.out.println("놀이동산에 가지 못했다.");
			}
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public AmusementPark getAmusementpark() {
			return amusementpark;
		}
		public void setAmusementpark(AmusementPark amusementpark) {
			this.amusementpark = amusementpark;
		}
		
	}

// DIXExp20.java
	package a01_diexp;
	
	import org.springframework.context.support.AbstractApplicationContext;
	import org.springframework.context.support.GenericXmlApplicationContext;
	
	import a01_diexp.z01_vo.ParkPerson;
	
	public class DIExp20 {
	
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			String path="a01_diexp\\di20.xml";
			AbstractApplicationContext ctx = new GenericXmlApplicationContext(path);
			// DL(dependency loopup)으로 id 명으로 객체를 가져온다.
			ParkPerson parkPerson = ctx.getBean("parkPerson",ParkPerson.class);
			System.out.println(parkPerson);
			parkPerson.going();
			ctx.close();
					
		}
	
	}
// di20.xml
	   <bean id="amusementpark" class="a01_diexp.z01_vo.AmusementPark">
        <constructor-arg value="에버랜드"/>
        <constructor-arg value="용인"/>
       </bean>
       <bean id="parkPerson" class="a01_diexp.z01_vo.ParkPerson" autowire="byType">
		<constructor-arg value="김연주"/>
       </bean>
// console : 김연주은용인에 위치한 에버랜드에 다녀왔다  
[1단계:개념] 4. autowire의 옵션 중, byType과 byName의 차이점을 기본예제를 통해서 설명하세요.
	- byName : 프로퍼티의 이름과 같은 이름을 갖는 빈 객체를 설정
	- byType : 프로퍼티의 타입과 같은 타입을 갖는 빈객체를 설정

[1단계:확인] 5. 마트와 마트에서 구매한 객체 Product 3개를 선언하고, 이 중 하나의 객체를 byName으로 설정해서 할당하게 처리
// DIExp20.java
		Mart mart = ctx.getBean("mart",Mart.class);
		System.out.println(mart);
		mart.shopping();
		ctx.close();
				

// di20.xml
	<bean id="product" class="a01_diexp.z01_vo.Product">
      <constructor-arg value="자두녹차"/>
      <constructor-arg value="1500"/>
      <constructor-arg value="2"/>
    </bean>
    <bean id="product02" class="a01_diexp.z01_vo.Product">
      <constructor-arg value="레몬녹차"/>
      <constructor-arg value="1500"/>
      <constructor-arg value="1"/>
    </bean>
    <bean id="product03" class="a01_diexp.z01_vo.Product">
      <constructor-arg value="콜라"/>
      <constructor-arg value="2000"/>
      <constructor-arg value="4"/>
    </bean>
       
    <bean id="mart" class="a01_diexp.z01_vo.Mart" autowire ="byName">
       <constructor-arg value="홈플러스"/>
    </bean>
    
//console 결과 : 
	홈플러스에서 구매한 물건
	물건명 : 콜라
	가격 : 2000
	갯수 : 4
